[experiment]
exp_name = string(max=25)                                   # experiment name
tags = string_list()                                        # optional set of tags
seed = integer(default=-1)                                  # random seed
debug = boolean(default=0)                                  # If True, debugging
train = boolean(default=0)                                  # If True, train model
test = boolean(default=0)                                   # If True, test model
use_comet_logger = boolean(default=0)                       # If True, use Comet ML Logger

[debug]             # Model debugging arguments
    [[general]]
    use_influence_function = boolean(default=0)             # If True, use influence functions to debug harmful predictions

[data]              # Data arguments
    [[general]]         # General shared arguments
    dsets = string_list(default=list("sickkids_beamform"))  # Dataset/s to load in training/validation
    full_seq = boolean(default=0)                           # If True, using full video sequence in training/inference
    img_size = integer(min=100, default=256)                # Default image size expected
    label_part = options("side", "plane", "side_and_plane", default="plane")    # Specific sub-label to use, such as plane, side or all
    num_classes = integer(min=1, max=6, default=3)          # Number of classes/labels
    include_labeled_other = boolean(default=0)              # If True, include images labeled "Other" as new class
    mode = integer(min=1, max=3, default=3)                 # Number of image channels to load
    exclude_filename_json = string()                        # If provided, list of filenames to exclude from train/val/test
    downsample_train_prop = float(min=0, max=1, default=1)  # Proportion of training set to downsample to

    [[misc]]            # Miscellaneous arguments
    relative_side = boolean(default=0)                      # If True, relabeling Left/Right to First/Second based on first seen

    [[transforms]]      # Image pre-processing arguments
    standardize_images = boolean(default=0)                 # If True, standardizes images with training set pre-computed mean/std

    [[training]]        # Training-related arguments
    train_test_split = float(min=0, max=1, default=0.75)    # Prop. of total data to leave for training & validation, rest for testing
    train_val_split = float(min=0, max=1, default=0.75)     # Prop. of data after removing test for training, rest for validation
    cross_val_folds = integer(min=1, default=1)             # If >1, perform K-Fold cross-validation
    force_train_ids = string_list()                         # List of patient IDs to place into training set

    [[augment]]         # Augmentations during training
    augment_training = boolean(default=0)                   # If True, adding augmentations during training pre-DataLoader
    crop_scale = float(min=0.01, max=1.0, default=0.3)      # Lower bound on proportion of area cropped relative to the full image.

    [[dataloader]]      # Dataloader-related arguments
    batch_size = integer(min=1, default=16)                 # Batch size
    shuffle = boolean(default=0)                            # If True, shuffling data
    num_workers = integer(min=0, default=4)                 # Number of CPU workers
    imbalanced_sampler = boolean(default=0)                 # If True, perform imbalanced sampling
    use_ood_unlabeled = boolean(default=0)                  # If True, sample OOD data from unlabeled frames in training sequence
    use_ood_hocuspocus_real = boolean(default=0)            # If True, sample OOD data from HocusPocus real dataset
    use_ood_hocuspocus_noise = boolean(default=0)           # If True, sample OOD data from HocusPocus noise dataset

    [[segmentation]]    # Segmentation arguments for GradCAM loss
    load_seg_mask = boolean(default=0)                      # If True, load segmentation masks
    include_liver_seg = boolean(default=0)                  # If True, combining liver masks with other masks
    ensure_seg_mask = boolean(default=0)                    # If True, filter training set for only samples with segmentation masks

[model]
    [[general]]             # General model arguments
    model_provider = option("timm", "torchvision", default="timm")   # Model provider
    model_name = string(min=1, default="efficientnet_b0")   # Name of convolutional model
    pretrained = boolean(default=0)                         # If True, load pretrained version of model
    use_pretrained_standardization = boolean(default=0)     # If True, use pretrained model transforms

    [[training]]            # Training arguments
    checkpoint = boolean(default=1)                         # If True, performing checkpointing
    early_stopping = boolean(default=0)                     # If True, perform early stopping on validation loss
    precision = option("16", "bf16", "16-mixed", "bf16-mixed", "32", default="32")    # Model precision
    stop_epoch = integer(min=1, default=200)                # Number of epochs
    use_mixup_aug = boolean(default=0)                      # If True, use MixUp augmentation during training post-DataLoader

    [[pretrained]]          # Pre-trained model arguments
    freeze_weights = boolean(default=0)                     # If True, weights stay frozen
    from_imagenet = boolean(default=0)                      # If True, loading ImageNet weights
    from_exp_name = string_list(default=,)                  # Experiment/s to start training from

    [[optim]]               # Optimization parameters
    optimizer = option("sgd", "adamw", default="adamw")     # Optimizer of choice
    lr = float(min=0.000001, default=0.001)                 # Learning rate
    weight_decay = float(min=0, default=0.001)              # Weight decay
    momentum = float(min=0, default=0.9)                    # SGD momentum
    grad_clip_norm = float(min=0, default=1.0)              # Gradient clipping norm
    swa = boolean(default=1)                                # If True, performing Stochastic Weight Averaging
    use_grokfast = boolean(default=0)                       # If True, use Grokfast-EMA
    accum_batches = integer(min=1, default=1)               # Number of batches to accumulate gradient over to increase effective batch size
    lr_scheduler = string(min=0, default=,)                 # Learning rate scheduler
    ema = boolean(default=0)                                # If True, perform EMA on weights
    ema_decay = float(min=0, default=0.9999)                # Decay rate for EMA

    [[misc]]                # Miscellaneous arguments
    torch_compile = boolean(default=0)                      # If True, using `torch.compile` on model
    multi_output = boolean(default=0)                       # If True, using multi-output supervised model

    [[ood]]                 # OOD detection arguments
    outlier_exposure = boolean(default=0)                   # If True, show outliers during training for OOD detection
    oe_weight = float(min=0, default=0.1)                   # Weight of outlier exposure
    ood_method = option("msp", "energy", "maha_distance", default="msp")     # Method for OOD detection
    ood_overlay_background = boolean(default=0)             # If True, overlay background image for OOD detection
    ood_mix_background = boolean(default=0)                 # If True, mix backgrounds between ultrasound images for OOD detection
    ood_augment = boolean(default=0)                        # If True, augment OOD samples

    [[finetuning]]          # Arguments for finetuning
    saft = boolean(default=0)                               # If True, perform Sparse Adaptive Fine-Tuning
    saft_sparsity = float(min=0, max=1, default=0.1)       # Sparse Adaptive Fine-Tuning sparsity

    [[gradcam_loss]]        # GradCAM Loss arguments
    use_gradcam_loss = boolean(default=0)                   # If True, adding auxiliary GradCAM loss
    use_orig_implement = boolean(default=0)                 # If True, using original GradCAM loss implementation
    gradcam_loss_weight = float(min=0., default=1.)         # Weight of GradCAM loss when added to cross-entropy loss
    use_all_class_gradcam_loss = boolean(default=1)         # If True, penalizing ALL classes for having gradients OUTSIDE the positive class mask
    add_neg_class_gradcam_loss = boolean(default=0)         # If True, penalizing NEGATIVE classes for having gradients IN the positive class mask

[ssl]               # Self-supervised pre-training specific arguments
self_supervised = boolean(default=0)                        # If True, self-supervised

    [[ssl_experiment]]
    ssl_model = string(default="moco")                      # name of model
    ssl_ckpt_path = string(default=None)                    # path to model checkpoint
    temperature = float(min=0, default=0.1)                 # Temperature for loss scaling

    [[ssl_eval]]        # Training SSL eval models
    ssl_eval_linear = boolean(default=0)                    # If True, linear probing on SSL model
    ssl_eval_linear_lstm = boolean(default=0)               # If True, lstm+linear probing on SSL model
    from_ssl_eval = boolean(default=0)                      # If True, weights come from SSL + linear probed model

    [[ssl_data]]        # Data-Loading for SSL pre-training
    same_label = boolean(default=0)                         # If True, positive samples are made to be same label images
    custom_collate = string(default=None)                   # Custom SSL data function for creating paired augmentations

    [[moco_args]]       # MoCo-specific arguments
    memory_bank_size = integer(min=0, default=1024)         # Size of MoCo memory bank
    exclude_momentum_encoder = boolean(default=0)           # If True, excluding momentum encoder
    custom_ssl_loss = string(default=None)                  # Custom SSL loss

    [[tcl_args]]        # TCL-specific arguments
    warmup_epochs = integer(min=0, default=0)               # Number of warmup epochs
    noise_gmm_type = option("single", "per_class", default="per_class") # Noise GMM type
